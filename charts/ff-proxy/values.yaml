# Default values for ff-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# The ProxyKey you want to configure your Proxy to use
proxyKey:

# Use existing Secret which stores PROXY_KEY key instead of creating a new one. The value should be set with the `PROXY_KEY` key inside the secret.
## The use of external secrets allows you to manage credentials from external tools like Vault, 1Password, SealedSecrets, among other.
## If set, this parameter takes precedence over "proxyKey".
existingProxyKey:

# Used by the Proxy to sign the JWT tokens it creates and returns to SDKs when they authenticate with the Proxy. The Proxy then checks that the token provided in any subsequent reqeusts by SDKs has been signed with this secret to ensure auth tokens can't be spoofed.
authSecret:

# Use existing Secret which stores AUTH_SECRET key instead of creating a new one. The value should be set with the `AUTH_SECRET` key inside the secret.
## The use of external secrets allows you to manage credentials from external tools like Vault, 1Password, SealedSecrets, among other.
## If set, this parameter takes precedence over "authSecret".
existingAuthSecret:

# The host and port of the redis server you want your Proxy to connect to
redisAddress:

image:
  repository: harness/ff-proxy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# configuration specific to the writer pods
writer:
  service:
    enabled: false
    type: ClusterIP
    port: 7000

  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 2
      memory: 1Gi
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  
  nodeSelector: {}

  tolerations: []

  affinity: {}

  # additional environment variables
  custom_envs:
    # - name: DELEGATE_TASK_CAPACITY
    #   value: "10"

  # mounts for the delegate pod
  custom_mounts:
    # - name: certs
    #   mountPath: /shared/customer-artifacts/certificates/

  # volumes to add to the delegate container
  custom_volumes:
    # - name: certs
    #   persistentVolumeClaim:
    #     claimName: harness-delegate-ng-certs

# configuration specific to the read replica pods
readReplica:

  # disable the read replica to run in single pod mode, not advised for production
  enabled: true
  
  service:
    type: ClusterIP
    port: 7000

  replicaCount: 2

  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 2
      memory: 1Gi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  
  nodeSelector: {}

  tolerations: []

  affinity: {}

  # additional environment variables
  custom_envs:
    # - name: DELEGATE_TASK_CAPACITY
    #   value: "10"

  # mounts for the delegate pod
  custom_mounts:
    # - name: certs
    #   mountPath: /shared/customer-artifacts/certificates/

  # volumes to add to the delegate container
  custom_volumes:
    # - name: certs
    #   persistentVolumeClaim:
    #     claimName: harness-delegate-ng-certs
